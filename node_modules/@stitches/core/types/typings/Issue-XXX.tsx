import type * as React from 'react'

/* Utilities */
/* ========================================================================== */

namespace Util {
	/** Returns a widened value from the given value. */
	export type Widen<T> = T extends number
		? `${T}` | T
	: T extends 'true'
		? boolean | T
	: T extends 'false'
		? boolean | T
	: T extends `${number}`
		? number | T
	: T

	/** Narrowed function. */
	export type Function = (...args: any[]) => unknown
}

namespace CSS {
	export interface Properties {
		/** Color is the color. */
		color?: 'Orange' | 'Tan' | 'Turquoise' | 'FloralWhite' | 'ActiveText' | (string & Record<never, never>)
		display?: 'block' | 'inline' | 'run-in' | 'inline-block' | 'inline-flex' | 'inline-grid' | 'inline-list-item' | 'inline-table' | (string & Record<never, never>)
		fontSize?: 'normal' | ((number | string) & Record<never, never>)
	}
}

/** Unique symbol used to reference an internal value. */
export declare const internal: unique symbol

/** Unique symbol used to reference an internal value. */
export type internal = typeof internal

/** Returns an internal array of compositions. */
type InternalCompositions<Composition> = internal extends keyof Composition ? 'compositions' extends keyof Composition[internal] ? Composition[internal]['compositions'] : {} : {}

/** Returns an object of variants that can be extended with additional CSS. */
type ExtendableVariants<Compositions extends any[]> = 0 extends keyof Compositions
	?
		(
			internal extends keyof Compositions[0]
				? 'compositions' extends keyof Compositions[0][internal]
					? ExtendableVariants<Compositions[0][internal]['compositions']>
				: unknown
			: unknown
		) & (
			'variants' extends keyof Compositions[0]
				? {
					[Name in keyof Compositions[0]['variants']]?: {
						[Pair in keyof Compositions[0]['variants'][Name]]?: CSS.Properties
					}
				}
			: unknown
		) & (
			Compositions extends [lead: any, ...tail: infer NextCompositions]
				? ExtendableVariants<NextCompositions>
			: unknown
		)
: never

/** Returns variant objects merged together with their values widened. */
type MergeWideVariants<T1 = {}, T2 = {}> = {
	[P in keyof T1]: Util.Widen<T1[P]> | (P extends keyof T2 ? T2[P] : never)
} & {
	[P in keyof T2]: Util.Widen<T2[P]> | (P extends keyof T1 ? T1[P] : never)
}

/** Returns a props object that references variants from compositions. */
type VariantProps<Compositions extends any[]> = 0 extends keyof Compositions
	?
		MergeWideVariants<
			InternalCompositions<Compositions[0]> extends any[]
				? VariantProps<InternalCompositions<Compositions[0]>>
			: 'variants' extends keyof Compositions[0]
				? {
					[Name in keyof Compositions[0]['variants']]?: keyof Compositions[0]['variants'][Name]
				}
			: {},
			Compositions extends [lead: any, ...tail: infer NextCompositions]
				? VariantProps<NextCompositions>
			: {}
		>
: never

/** Playground creator. */
type Stitches = {
	css: {
		<
			Compositions extends (
				| string
				| React.ExoticComponent<any>
				| React.JSXElementConstructor<any>
				| Util.Function
				| object
			)[]
		>(
			...compositions: {
				[K in keyof Compositions]: (
					Compositions[K] extends boolean | number | string | void | Util.Function
						? Compositions[K]
					: Compositions[K] extends object
						? {
							/** The **variants** property allows you to set a subclass of styles based on a key value pair. */
							variants?: {
								[Name in string]: {
									[Pair in number | string]: CSS.Properties
								}
							}
							/** The **defaultVariants** property allows you to set a subclass of styles based on a key value pair. */
							defaultVariants?: 'defaultVariants' extends keyof Compositions[K]
								? VariantProps<Compositions>
							: unknown
						} & NestedStyles
					: {}
				)
			}
		): {
			(
				props?: VariantProps<Compositions> & {
					[name: string]: unknown
				}
			): {}
		} & {
			[internal]: {
				compositions: Compositions
			}
		}
	}
}

type NestedStyles = {
	[K in keyof CSS.Properties]: CSS.Properties[K]
} & {
	[K in string]: number | string | NestedStyles
}

/* Stitches testing playground */
/* ========================================================================== */

let { css } = {} as Stitches

let componentA = css({
	color: 'ActiveText',
	'&:hover': {
		color: 'ActiveText',
	},
	variants: {
		peace: {
			1: { color: 'Orange' },
		},
	},
}, {
	variants: {
		peace: {
			2: { color: 'Tan', },
		},
		smile: {
			true: { color: 'Turquoise', },
			false: { color: 'FloralWhite', },
		},
	},
}, {
	variants: {
		truth: {
			www: { color: 'ActiveText' },
		},
	},
}, {
	defaultVariants: {
		// see "peace", "smile", & "truth" after this line
	}
})

componentA({
	truth: 'www',
})

let componentB = css(componentA, {
	color: 'awesome',
	desktop: 'awareness',
	variants: {
		laugh: {
			bold: {},
			easy: {},
			free: {},
		},
	},
	defaultVariants: {
		laugh: 'free', // see "bold", "easy", & "free" for this value
		// see "peace", "smile", & "truth" after this line
	}
})

componentB({
	// see "laugh", "peace", "smile", & "truth" after this line
})
